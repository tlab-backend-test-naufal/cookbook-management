// Code generated by MockGen. DO NOT EDIT.
// Source: recipe_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/entity"
	usecase "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/internal/usecase"
)

// MockRecipeRepository is a mock of RecipeRepository interface.
type MockRecipeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeRepositoryMockRecorder
}

// MockRecipeRepositoryMockRecorder is the mock recorder for MockRecipeRepository.
type MockRecipeRepositoryMockRecorder struct {
	mock *MockRecipeRepository
}

// NewMockRecipeRepository creates a new mock instance.
func NewMockRecipeRepository(ctrl *gomock.Controller) *MockRecipeRepository {
	mock := &MockRecipeRepository{ctrl: ctrl}
	mock.recorder = &MockRecipeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeRepository) EXPECT() *MockRecipeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecipeRepository) Create(ctx context.Context, params usecase.CreateRecipeParams) (*entity.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(*entity.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRecipeRepositoryMockRecorder) Create(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecipeRepository)(nil).Create), ctx, params)
}

// Delete mocks base method.
func (m *MockRecipeRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecipeRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecipeRepository)(nil).Delete), ctx, id)
}

// GetSummary mocks base method.
func (m *MockRecipeRepository) GetSummary(ctx context.Context, id uint64) (entity.RecipeSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummary", ctx, id)
	ret0, _ := ret[0].(entity.RecipeSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummary indicates an expected call of GetSummary.
func (mr *MockRecipeRepositoryMockRecorder) GetSummary(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummary", reflect.TypeOf((*MockRecipeRepository)(nil).GetSummary), ctx, id)
}

// List mocks base method.
func (m *MockRecipeRepository) List(ctx context.Context, filter usecase.ListRecipesFiter, limit, offset int) (entity.Recipes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter, limit, offset)
	ret0, _ := ret[0].(entity.Recipes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRecipeRepositoryMockRecorder) List(ctx, filter, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRecipeRepository)(nil).List), ctx, filter, limit, offset)
}

// Update mocks base method.
func (m *MockRecipeRepository) Update(ctx context.Context, id uint64, params usecase.RecipeParams) (*entity.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, params)
	ret0, _ := ret[0].(*entity.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRecipeRepositoryMockRecorder) Update(ctx, id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecipeRepository)(nil).Update), ctx, id, params)
}
