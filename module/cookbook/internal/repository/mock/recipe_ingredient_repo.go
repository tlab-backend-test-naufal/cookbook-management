// Code generated by MockGen. DO NOT EDIT.
// Source: recipe_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/entity"
	usecase "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/internal/usecase"
)

// MockRecipeIngredientRepository is a mock of RecipeIngredientRepository interface.
type MockRecipeIngredientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeIngredientRepositoryMockRecorder
}

// MockRecipeIngredientRepositoryMockRecorder is the mock recorder for MockRecipeIngredientRepository.
type MockRecipeIngredientRepositoryMockRecorder struct {
	mock *MockRecipeIngredientRepository
}

// NewMockRecipeIngredientRepository creates a new mock instance.
func NewMockRecipeIngredientRepository(ctrl *gomock.Controller) *MockRecipeIngredientRepository {
	mock := &MockRecipeIngredientRepository{ctrl: ctrl}
	mock.recorder = &MockRecipeIngredientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipeIngredientRepository) EXPECT() *MockRecipeIngredientRepositoryMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockRecipeIngredientRepository) BulkCreate(ctx context.Context, recipeID uint64, params usecase.BulkRecipeIngredientParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", ctx, recipeID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockRecipeIngredientRepositoryMockRecorder) BulkCreate(ctx, recipeID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockRecipeIngredientRepository)(nil).BulkCreate), ctx, recipeID, params)
}

// Delete mocks base method.
func (m *MockRecipeIngredientRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecipeIngredientRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecipeIngredientRepository)(nil).Delete), ctx, id)
}

// Update mocks base method.
func (m *MockRecipeIngredientRepository) Update(ctx context.Context, id uint64, params usecase.RecipeIngredientParams) (*entity.RecipeIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, params)
	ret0, _ := ret[0].(*entity.RecipeIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRecipeIngredientRepositoryMockRecorder) Update(ctx, id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecipeIngredientRepository)(nil).Update), ctx, id, params)
}
