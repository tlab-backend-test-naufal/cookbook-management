// Code generated by MockGen. DO NOT EDIT.
// Source: ingredient_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/entity"
	usecase "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/internal/usecase"
)

// MockIngredientRepository is a mock of IngredientRepository interface.
type MockIngredientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientRepositoryMockRecorder
}

// MockIngredientRepositoryMockRecorder is the mock recorder for MockIngredientRepository.
type MockIngredientRepositoryMockRecorder struct {
	mock *MockIngredientRepository
}

// NewMockIngredientRepository creates a new mock instance.
func NewMockIngredientRepository(ctrl *gomock.Controller) *MockIngredientRepository {
	mock := &MockIngredientRepository{ctrl: ctrl}
	mock.recorder = &MockIngredientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredientRepository) EXPECT() *MockIngredientRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIngredientRepository) Create(ctx context.Context, params usecase.IngredientParams) (*entity.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(*entity.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngredientRepositoryMockRecorder) Create(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngredientRepository)(nil).Create), ctx, params)
}

// Delete mocks base method.
func (m *MockIngredientRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngredientRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngredientRepository)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockIngredientRepository) List(ctx context.Context, limit, offset int) (entity.Ingredients, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].(entity.Ingredients)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngredientRepositoryMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngredientRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockIngredientRepository) Update(ctx context.Context, id uint64, params usecase.IngredientParams) (*entity.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, params)
	ret0, _ := ret[0].(*entity.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngredientRepositoryMockRecorder) Update(ctx, id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngredientRepository)(nil).Update), ctx, id, params)
}
