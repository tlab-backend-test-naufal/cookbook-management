// Code generated by MockGen. DO NOT EDIT.
// Source: ingredient_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/entity"
	usecase "github.com/tlab-backend-test-naufal/cookbook-management/module/cookbook/internal/usecase"
)

// MockIngredientUnitRepository is a mock of IngredientUnitRepository interface.
type MockIngredientUnitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIngredientUnitRepositoryMockRecorder
}

// MockIngredientUnitRepositoryMockRecorder is the mock recorder for MockIngredientUnitRepository.
type MockIngredientUnitRepositoryMockRecorder struct {
	mock *MockIngredientUnitRepository
}

// NewMockIngredientUnitRepository creates a new mock instance.
func NewMockIngredientUnitRepository(ctrl *gomock.Controller) *MockIngredientUnitRepository {
	mock := &MockIngredientUnitRepository{ctrl: ctrl}
	mock.recorder = &MockIngredientUnitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngredientUnitRepository) EXPECT() *MockIngredientUnitRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIngredientUnitRepository) Create(ctx context.Context, params usecase.IngredientUnitParams) (*entity.IngredientUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, params)
	ret0, _ := ret[0].(*entity.IngredientUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIngredientUnitRepositoryMockRecorder) Create(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIngredientUnitRepository)(nil).Create), ctx, params)
}

// Delete mocks base method.
func (m *MockIngredientUnitRepository) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIngredientUnitRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIngredientUnitRepository)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockIngredientUnitRepository) List(ctx context.Context, limit, offset int) (entity.IngredientUnits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].(entity.IngredientUnits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIngredientUnitRepositoryMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIngredientUnitRepository)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockIngredientUnitRepository) Update(ctx context.Context, id uint64, params usecase.IngredientUnitParams) (*entity.IngredientUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, params)
	ret0, _ := ret[0].(*entity.IngredientUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIngredientUnitRepositoryMockRecorder) Update(ctx, id, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIngredientUnitRepository)(nil).Update), ctx, id, params)
}
